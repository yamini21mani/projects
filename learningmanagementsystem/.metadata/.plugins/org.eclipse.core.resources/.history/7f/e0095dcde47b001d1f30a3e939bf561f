package com.te.learningmanagementsystem.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.te.learningmanagementsystem.dto.AddressDto;
import com.te.learningmanagementsystem.dto.AdminShowRequestDto;
import com.te.learningmanagementsystem.dto.BankDetailsDto;
import com.te.learningmanagementsystem.dto.BatchDetailsDto;
import com.te.learningmanagementsystem.dto.ContactDto;
import com.te.learningmanagementsystem.dto.DemoDto;
import com.te.learningmanagementsystem.dto.EmployeelistInBatch;
import com.te.learningmanagementsystem.dto.EducationalDetailsDto;
import com.te.learningmanagementsystem.dto.EmployeeDto;
import com.te.learningmanagementsystem.dto.ExperienceDto;
import com.te.learningmanagementsystem.dto.MentorDeleteDto;
import com.te.learningmanagementsystem.dto.MentorListDto;
import com.te.learningmanagementsystem.dto.MentorUpdateDto;
import com.te.learningmanagementsystem.dto.MockDetailsDto;
import com.te.learningmanagementsystem.dto.MockInfoDto;
import com.te.learningmanagementsystem.dto.PasswordChecking;
import com.te.learningmanagementsystem.dto.PrimaryInfoDto;
import com.te.learningmanagementsystem.dto.RequestListForEmployee;
import com.te.learningmanagementsystem.dto.SecondaryInfoDto;
import com.te.learningmanagementsystem.dto.StatusDto;
import com.te.learningmanagementsystem.dto.TechnicalDto;
import com.te.learningmanagementsystem.entity.AddressInfo;
import com.te.learningmanagementsystem.entity.ApproveListByAdmin;
import com.te.learningmanagementsystem.entity.BankDetails;
import com.te.learningmanagementsystem.entity.BatchDetails;
//import com.te.learningmanagementsystem.entity.Bank_Details;
//import com.te.learningmanagementsystem.entity.Batch_Details;
import com.te.learningmanagementsystem.entity.Contact_Info;
import com.te.learningmanagementsystem.entity.Educational_Details;
//import com.te.learningmanagementsystem.entity.Educational_Details;
import com.te.learningmanagementsystem.entity.Experience_Info;
import com.te.learningmanagementsystem.entity.MentorDisplay;
import com.te.learningmanagementsystem.entity.Mentor_Entity;
import com.te.learningmanagementsystem.entity.Mock_Details;
import com.te.learningmanagementsystem.entity.Mock_Info;
import com.te.learningmanagementsystem.entity.Primary_Info;
import com.te.learningmanagementsystem.entity.Secondary_Info;
//import com.te.learningmanagementsystem.entity.Secondary_Info;
import com.te.learningmanagementsystem.entity.Technical_Info;
import com.te.learningmanagementsystem.exception.InvalidId;
import com.te.learningmanagementsystem.passwordgenerator.PasswordGenerator;
import com.te.learningmanagementsystem.repository.AddressRepository;
import com.te.learningmanagementsystem.repository.ApproveRepositary;
import com.te.learningmanagementsystem.repository.BankDetailsRepository;
import com.te.learningmanagementsystem.repository.BatchDetailRepository;
import com.te.learningmanagementsystem.repository.ContactRepository;
import com.te.learningmanagementsystem.repository.EmployeelistRepositary;
import com.te.learningmanagementsystem.repository.DemoDtoRepository;
import com.te.learningmanagementsystem.repository.EducationalRepository;
import com.te.learningmanagementsystem.repository.ExperienceRepository;
import com.te.learningmanagementsystem.repository.MentorDisplayRepository;
import com.te.learningmanagementsystem.repository.MentorEntityRepository;
import com.te.learningmanagementsystem.repository.MockDetailRepository;
import com.te.learningmanagementsystem.repository.MockInfoRepository;
import com.te.learningmanagementsystem.repository.PrimaryInfoRepository;
import com.te.learningmanagementsystem.repository.SecondaryRepository;
import com.te.learningmanagementsystem.repository.StatusRepository;
import com.te.learningmanagementsystem.repository.TechnicalRepository;
import com.te.learningmanagementsystem.serviceInterface.EmployeeService;



@Service
public  class EmployeeServiceImp implements EmployeeService {
	@Autowired
	private PasswordChecking passwordChecking;
	// Repository
	@Autowired
	private MentorDisplayRepository mentorDisplayRepository;
	@Autowired
	private BankDetailsRepository bankDetailsRepository;

	@Autowired
	private ApproveRepositary approveRepositary;

	@Autowired
	private StatusRepository statusRepository;
	@Autowired
	private BatchDetailRepository batchDetailRepository;
	@Autowired
	private DemoDtoRepository demoDtoRepository;
	@Autowired
	private EducationalRepository educationalRepository;
	@Autowired
	private AddressRepository addressRepository;
	@Autowired
	private ContactRepository contactRepository;
	@Autowired
	private ExperienceRepository experienceRepository;
	@Autowired
	private TechnicalRepository technicalRepository;
	@Autowired
	private PrimaryInfoRepository primaryInfoRepository;
	@Autowired
	private MockDetailRepository mockDetailRepository;
	@Autowired
	private MockInfoRepository mockInfoRepository;
	@Autowired
	private SecondaryRepository secondaryRepository;
	@Autowired
	private MentorEntityRepository mentorEntityRepository;

	// PasswordCreate
	@Autowired
	private PasswordGenerator passwordGenerator;

	// entity
	@Autowired
	private MentorDisplay mentorDisplay;
	
	
//	private DemoDtoForMentor demoDtoForMentor;
	@Autowired
	private DemoDto demoDto;
	@Autowired
	private Educational_Details educational_Details;
	@Autowired
	private Mock_Info mock_Info;
	@Autowired
	private Mock_Details mock_Details;
	@Autowired
	private Primary_Info primary_Info;
	@Autowired
	private AddressInfo addressInfo;
	@Autowired
	private Contact_Info contact_Info;
	@Autowired
	private BankDetails bankDetails;
	@Autowired
	private BatchDetails batchDetails;
//	@Autowired
//	private Secondary_Info secondary_Info;
	@Autowired
	private Experience_Info experience_Info;
	@Autowired
	private Technical_Info technical_Info;

//deleteApi
	@Override
	public String deleteAddress(AddressDto addressDto) {
		BeanUtils.copyProperties(addressDto, addressInfo);
		AddressInfo addInfo = addressRepository.findById(addressInfo.getsNo()).orElse(null);
		addressRepository.delete(addInfo);
		return null;
	}

	@Override
	public String deleteExperience(ExperienceDto experienceDto) {
		BeanUtils.copyProperties(experienceDto, experience_Info);
		Experience_Info Expinfo = experienceRepository.findById(experienceDto.getsNo()).orElse(null);
		experienceRepository.delete(Expinfo);
		return null;
	}

	@Override
	public String deleteContact(ContactDto contactDto) {
		BeanUtils.copyProperties(contactDto, contact_Info);
		Contact_Info conInfo = contactRepository.findById(contact_Info.getContactNumber()).orElse(null);
		contactRepository.delete(conInfo);
		return null;
	}

	@Override
	public String deleteTechnical(TechnicalDto technicalDto) {
		BeanUtils.copyProperties(technicalDto, technical_Info);
		Technical_Info techInfo = technicalRepository.findById(technical_Info.getsNo()).orElse(null);
		technicalRepository.delete(techInfo);
		return null;
	}

	@Override
	public String deleteEmployeedata(EmployeeDto employeeDto) {
		BeanUtils.copyProperties(employeeDto, primary_Info);
		Primary_Info primarytable = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
		primaryInfoRepository.delete(primarytable);
		return null;
	}

//Mock Info API's	
	@Override
	public boolean createMockData(MockDetailsDto mockDetailsDto) {
			BeanUtils.copyProperties(mockDetailsDto, mock_Details);
			mock_Details.setMockno(mockDetailsDto.getMockno());
			mock_Details.setSno(mockDetailsDto.getSno());
			mock_Details.setPanel(mockDetailsDto.getPanel());
			mock_Details.setDateAndTime(mockDetailsDto.getDateAndTime());
			mock_Details.setTechnology(mockDetailsDto.getTechnology());
			Mock_Details save = mockDetailRepository.save(mock_Details);
			if (save != null) {
				return true;
			} else
				throw new InvalidId("Mock not created please check your fields");
		
	}


	@Override
	public Mock_Details getMockDetails(MockDetailsDto mockDetailsDto) {
		BeanUtils.copyProperties(mockDetailsDto, mock_Details);
		Mock_Details getDetail = mockDetailRepository.findById(mock_Details.getSno()).orElse(null);

		return getDetail;
	}

	@Override
	public Mock_Details updateMockDetails(MockDetailsDto mockDetailsDto) {
		BeanUtils.copyProperties(mockDetailsDto, mock_Details);
		Mock_Details updateDetail = mockDetailRepository.findById(mock_Details.getSno()).orElse(null);
		if (updateDetail != null) {
			mock_Details.setPanel(mockDetailsDto.getPanel());
			mock_Details.setDateAndTime(mockDetailsDto.getDateAndTime());
			mock_Details.setMockno(mockDetailsDto.getMockno());
			mock_Details.setTechnology(mockDetailsDto.getTechnology());
			mock_Details.setMockRating(mockDetailsDto.getMockRating());
			mockDetailRepository.save(mock_Details);
			return mock_Details;

		}
		return null;
	}

	@Override
	public String deleteMockDetails(MockDetailsDto mockDetailsDto) {
		BeanUtils.copyProperties(mockDetailsDto, mock_Details);
		mockDetailRepository.deleteById(mockDetailsDto.getSno());
		return null;
	}

	@Override
	public boolean createMockInfo(Mock_Info mock_Info) {
		BeanUtils.copyProperties(mock_Info, mock_Details);
		mock_Info.setMockId(mock_Info.getMockId());
//		mock_Info.setMockType(mockInfoDto.getMockType());
//		mock_Info.setMockTakenBy(mockInfoDto.getMockTakenBy());
//		mock_Info.setPraticalMock(mockInfoDto.getPraticalMock());
//		mock_Info.setTheoriticalMock(mockInfoDto.getTheoriticalMock());
//		mock_Info.setOverallFeedBack(mockInfoDto.getOverallFeedBack());
//		mock_Info.setDetailsFeddBack(mockInfoDto.getDetailsFeddBack());
		Mock_Info save = mockInfoRepository.save(mock_Info);
		if (save != null) {
			return true;
		}

		return false;
	}

	@Override
	public Mock_Info getMockInfo(MockInfoDto mockInfoDto) {
		BeanUtils.copyProperties(mockInfoDto, mock_Info);
		Mock_Info getDetail = mockInfoRepository.findById(mock_Info.getMockId()).orElse(null);

		return getDetail;
	}

	@Override
	public Mock_Info updateMockInfo(MockInfoDto mockInfoDto) {
		BeanUtils.copyProperties(mockInfoDto, mock_Info);
		Mock_Info updateDetail = mockInfoRepository.findById(mock_Info.getMockId()).orElse(null);
		if (updateDetail != null) {
			mock_Info.setMockType(mockInfoDto.getMockType());
			mock_Info.setMockTakenBy(mockInfoDto.getMockTakenBy());
			mock_Info.setPraticalMock(mockInfoDto.getPraticalMock());
			mock_Info.setTheoriticalMock(mockInfoDto.getTheoriticalMock());
			mock_Info.setOverallFeedBack(mockInfoDto.getOverallFeedBack());
			mock_Info.setDetailsFeddBack(mockInfoDto.getDetailsFeddBack());
			mockInfoRepository.save(mock_Info);
			return mock_Info;
		}
		return null;

	}

	@Override
	public String deleteMockInfo(MockInfoDto mockInfoDto) {
		BeanUtils.copyProperties(mockInfoDto, mock_Info);
		mockDetailRepository.deleteById(mockInfoDto.getMockId());
		return null;
	}

	@Override
	public Primary_Info register(Primary_Info primary_Info2) {
		primary_Info2.setEmpPass(passwordGenerator.generateRandomString(6));
		showReq(primary_Info2);
		return primaryInfoRepository.save(primary_Info2);

	}

	@Override
	public Primary_Info login(EmployeeDto employeeDto) {
		BeanUtils.copyProperties(employeeDto, primary_Info);
		Primary_Info employeedata = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
		if (primary_Info.getEmpId().equalsIgnoreCase(employeedata.getEmpId())) {
			if (primary_Info.getEmpPass().equals(employeedata.getEmpPass())) {
				return employeedata;
			} else
				return null;
		}
		return null;
	}

//show request API for Admin
//	@Override
	public void showReq(Primary_Info primary_Info) {

//		Primary_Info primarytable = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
//		Educational_Details details=educationalRepository.findById(educational_Details.getsNo()).orElse(null);
//		Experience_Info info_Entity2 = experienceRepository.findById(experience_Info.getsNo()).orElse(null);
//		Contact_Info contactInfo1 = contactRepository.findById(contact_Info.getContactNumber()).orElse(null);

		Primary_Info primarytable = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
		
		List<Educational_Details> educList = primarytable.getEducList();
		for (Educational_Details educational_Details : educList) {
			demoDto.setYop(educational_Details.getYearOfPassing());
			demoDto.setPercentage(educational_Details.getPercentage());
		}
		
		List<Experience_Info> expList = primarytable.getExpList();
		for (Experience_Info experience_Info : expList) {
			demoDto.setExperience(experience_Info.getYearOfExperience());
		}
		
		List<Contact_Info> conList = primarytable.getConList();
		for (Contact_Info contact_Info : conList) {
			demoDto.setContactNumber(contact_Info.getContactNumber());
		}
		
		
		demoDto.setEmployeeId(primarytable.getEmpId());

		demoDto.setEmployeeName(primarytable.getEmpName());
		
		

//		demoDto.setYop(details.getYearOfPassing());
//
//		demoDto.setPercentage(details.getPercentage());
//
//		demoDto.setExperience(info_Entity2.getYearOfExperience());
//
//		demoDto.setContactNumber(contactInfo1.getContactNumber());
		
		

		demoDtoRepository.save(demoDto);

	}

//	@Override
//	public ArrayList<StatusDto> approve(EmployeeBatchDetails batchDetails2) {
//		
//	EmployeeBatchDetails findAll = batchDetailsRepository.findById(batchDetails2.getEmp_batch_id()).orElse(null);
//	ArrayList<StatusDto> arrayList= new ArrayList();
//		ArrayList<StatusDto> dto = new ArrayList();
//		BeanUtils.copyProperties(batchDetails2, dto);
//		return dto;
//
//		
//		
//	}
	
//	public ArrayList<StatusDto> approve(){
//		List<Batch_Details> findAll = batchDetailRepository.findAll();
//		ArrayList<StatusDto> arrayList = new ArrayList<>();
//		for (Batch_Details employee : findAll) {
//			arrayList.add(new StatusDto(employee.getEmpBatchId(), employee.getEmpBatchName()));
//
//		}
//		return arrayList;
//
//	}

// to save the reject msg
	@Override
	public StatusDto reject(StatusDto dto) {

		StatusDto save = statusRepository.findById(dto.getEmp_batch_id()).orElse(null);
		return statusRepository.save(save);
	}

//mentor Batch details
	@Override
	public MentorDisplay showRequest(EmployeelistInBatch demoDtoForMentor) {
		Primary_Info primarytable1 = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
		Mock_Details mockDetails2 = mockDetailRepository.findById(mock_Details.getSno()).orElse(null);
		Mock_Info mock_Info2 = mockInfoRepository.findById(mock_Info.getMockId()).orElse(null);
		BatchDetails employeeBatchDetails = batchDetailRepository.findById(batchDetails.getEmpBatchId()).orElse(null);

		mentorDisplay.setEmployeeId(primarytable1.getEmpId());
		mentorDisplay.setEmployeeName(primarytable1.getEmpName());
		mentorDisplay.setMockRating(mockDetails2.getMockRating());
		mentorDisplay.setStatus(employeeBatchDetails.getEmpStatus());
		mentorDisplay.setMockTakenBy(mock_Info2.getMockTakenBy());
		mentorDisplayRepository.save(mentorDisplay);
		return mentorDisplay;

	}

//	For Login First Check and Login
	@Override
	public Primary_Info firstReset(PasswordChecking passwordChecking) {
		if (passwordChecking.getEmpId().startsWith("TYE")) {
			Primary_Info employeePrimaryInfo = new Primary_Info();
			BeanUtils.copyProperties(passwordChecking, employeePrimaryInfo);
			Primary_Info findById = primaryInfoRepository.findById(employeePrimaryInfo.getEmpId()).orElse(null);
			if (findById != null) {
				if (findById.getCount() == 0) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						if (passwordChecking.getFirstPassword().equals(passwordChecking.getSecondPassword())) {
							findById.setEmpPass(passwordChecking.getFirstPassword());
							findById.setCount(1);
							primaryInfoRepository.save(findById);
							return findById;
						}
						return null;

					}
					return null;
				} else if (findById.getCount() == 1) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						return findById;
					}
					return null;
				}
				return null;
			}
			return null;
		} else if (passwordChecking.getEmpId().startsWith("TYM")) {
			Primary_Info employeePrimaryInfo = new Primary_Info();
			BeanUtils.copyProperties(passwordChecking, employeePrimaryInfo);
			Primary_Info findById = primaryInfoRepository.findById(employeePrimaryInfo.getEmpId()).orElse(null);
			if (findById != null) {
				if (findById.getCount() == 0) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						if (passwordChecking.getFirstPassword().equals(passwordChecking.getSecondPassword())) {
							findById.setEmpPass(null);
							findById.setCount(1);
							primaryInfoRepository.save(findById);
							return findById;
						}
						return null;

					}
					return null;
				} else if (findById.getCount() == 1) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						return findById;
					}
					return null;
				}
				return null;
			}
			return null;

		} else if (passwordChecking.getEmpId().startsWith("TYA")) {

			Primary_Info employeePrimaryInfo = new Primary_Info();
			BeanUtils.copyProperties(passwordChecking, employeePrimaryInfo);
			Primary_Info findById = primaryInfoRepository.findById(employeePrimaryInfo.getEmpId()).orElse(null);
			if (findById != null) {
				if (findById.getCount() == 0) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						if (passwordChecking.getFirstPassword().equals(passwordChecking.getSecondPassword())) {
							findById.setEmpPass("1");
							findById.setCount(1);
							primaryInfoRepository.save(findById);
							return findById;
						}
						return null;

					}
					return null;
				} else if (findById.getCount() == 1) {
					if (passwordChecking.getGeneratedPassword().equals(findById.getEmpPass())) {
						return findById;
					}
					return null;
				}
				return null;
			}
			return null;

		} 
		return null;
	}
//update API's
	@Override
	public Primary_Info update(PrimaryInfoDto employeeUpdateDto) {
		Primary_Info info = new Primary_Info();
		BeanUtils.copyProperties(employeeUpdateDto, info);
		Primary_Info primaryInfo = primaryInfoRepository.findById(employeeUpdateDto.getEmpId()).orElse(null);
		if (primaryInfo != null) {
			primaryInfo.setBloodGroup(employeeUpdateDto.getBloodGroup());
			primaryInfo.setDesignation(employeeUpdateDto.getDesignation());
			primaryInfo.setDob(employeeUpdateDto.getDob());
			primaryInfo.setDoj(employeeUpdateDto.getDoj());
			primaryInfo.setEmpStatus(employeeUpdateDto.getEmpStatus());
			primaryInfo.setEmpName(employeeUpdateDto.getEmpName());
			primaryInfo.setNationality(employeeUpdateDto.getNationality());
			primaryInfo.setEmpPass(employeeUpdateDto.getEmpPass());
			return primaryInfoRepository.save(primaryInfo);

		}
		return null;
	}

	@Override
	public Secondary_Info secondaryInfoUpdate(SecondaryInfoDto infoUpdate) {
		Secondary_Info employeeSecondaryInfo = new Secondary_Info();
		BeanUtils.copyProperties(infoUpdate, employeeSecondaryInfo);
		Secondary_Info employeeSecondaryInfo2 = secondaryRepository.findById(infoUpdate.getPanNo()).orElse(null);
		if (employeeSecondaryInfo2 != null) {
			employeeSecondaryInfo2.setPanNo(infoUpdate.getPanNo());
			employeeSecondaryInfo2.setAadharNo(infoUpdate.getAadharNo());
			employeeSecondaryInfo2.setFatherName(infoUpdate.getFatherName());
			employeeSecondaryInfo2.setMaritalStatus(infoUpdate.getMaritalStatus());
			employeeSecondaryInfo2.setMotherName(infoUpdate.getMotherName());
			employeeSecondaryInfo2.setPassportNo(infoUpdate.getPassportNo());
			employeeSecondaryInfo2.setSpouseName(infoUpdate.getSpouseName());

			return secondaryRepository.save(employeeSecondaryInfo2);

		}
		return null;
	}

	@Override
	public AddressInfo addressUpdate(AddressDto addressUpdate) {
		AddressInfo addressInfo = new AddressInfo();
		BeanUtils.copyProperties(addressUpdate, addressInfo);
		AddressInfo addressInfo2 = addressRepository.findById(addressUpdate.getsNo()).orElse(null);
		if (addressInfo2 != null) {
			addressInfo2.setAddressType(addressUpdate.getAddressType());
			addressInfo2.setCity(addressUpdate.getCity());
			addressInfo2.setDoorNo(addressUpdate.getDoorNo());
			addressInfo2.setLandMark(addressUpdate.getLandMark());
			addressInfo2.setLocality(addressUpdate.getLocality());
			addressInfo2.setPincode(addressUpdate.getPincode());
			addressInfo2.setStreet(addressUpdate.getStreet());

			return addressRepository.save(addressInfo2);

		}
		return null;
//		return null;
	}

	@Override
	public BankDetails bankUpdate(BankDetailsDto bankDetailsUpdate) {
		BankDetails bankDetails = new BankDetails();
		BeanUtils.copyProperties(bankDetailsUpdate, bankDetails);
		BankDetails bankDetails2 = bankDetailsRepository.findById(bankDetailsUpdate.getAccountNo()).orElse(null);
		if (bankDetails2 != null) {
			bankDetails2.setAccountNo(bankDetailsUpdate.getAccountNo());
			bankDetails2.setAccountType(bankDetailsUpdate.getAccountType());
			bankDetails2.setBankName(bankDetailsUpdate.getBankName());
			bankDetails2.setBranch(bankDetailsUpdate.getBranch());
			bankDetails2.setIfscCode(bankDetailsUpdate.getIfscCode());
			bankDetails2.setState(bankDetailsUpdate.getState());

			return bankDetailsRepository.save(bankDetails2);

		}
		return null;
	}

	@Override
	public Contact_Info contactUpdate(ContactDto contactUpdate) {
		
		Contact_Info contact = new Contact_Info();
		BeanUtils.copyProperties(contactUpdate, contact);
		Contact_Info contact2 = contactRepository.findById(contactUpdate.getContactNumber()).orElse(null);
		if (contact2 != null) {
			contact2.setContactNumber(contactUpdate.getContactNumber());
			contact2.setContactType(contactUpdate.getContactType());
			return contactRepository.save(contact2);
		}
		return null;
	}

	@Override
	public Educational_Details educationupdate(EducationalDetailsDto educationUpdate) {
		Educational_Details educationDetails = new Educational_Details();
		BeanUtils.copyProperties(educationUpdate, educationDetails);
		Educational_Details educationDetails2 = educationalRepository.findById(educationUpdate.getsNo()).orElse(null);
		if (educationDetails2 != null) {
			educationDetails2.setInstituteName(educationUpdate.getInstituteName());
			educationDetails2.setEducationType(educationUpdate.getEducationType());
			educationDetails2.setPercentage(educationUpdate.getPercentage());
			educationDetails2.setSpecialization(educationUpdate.getSpecialization());
			educationDetails2.setState(educationUpdate.getState());
			educationDetails2.setUniversityName(educationUpdate.getUniversityName());
			educationDetails2.setYearOfPassing(educationUpdate.getYearOfPassing());
			return educationalRepository.save(educationDetails2);
		}
		return null;
	}

	@Override
	public Technical_Info technicalUpdate(TechnicalDto infoUpdate) {
		Technical_Info info =new Technical_Info();
		BeanUtils.copyProperties(infoUpdate, info);
		Technical_Info technicalInfo=technicalRepository.findById(infoUpdate.getsNo()).orElse(null);
		if(technicalInfo != null) {
			technicalInfo.setSkillRating(infoUpdate.getSkillRating());
			technicalInfo.setSkillType(infoUpdate.getSkillType());
			technicalInfo.setYearOfExperience(infoUpdate.getYearOfExperience());
			
			return technicalRepository.save(technicalInfo);
		}
		return null;
	}

	@Override
	public Experience_Info getExperienceUpdate(ExperienceDto infoUpdate) {
		Experience_Info employeeExperienceInfo =new Experience_Info();
		BeanUtils.copyProperties(infoUpdate, employeeExperienceInfo);
		Experience_Info employeeExperienceInfo2=experienceRepository.findById(infoUpdate.getsNo()).orElse(null);
		if(employeeExperienceInfo2 != null) {
			employeeExperienceInfo2.setCompanyName(infoUpdate.getCompanyName());
			employeeExperienceInfo2.setDateOfJoining(infoUpdate.getDateOfJoining());
			employeeExperienceInfo2.setDateOfRelieving(infoUpdate.getDateOfRelieving());
			employeeExperienceInfo2.setDesignation(infoUpdate.getDesignation());
			employeeExperienceInfo2.setLocation(infoUpdate.getLocation());
			employeeExperienceInfo2.setYearOfExperience(infoUpdate.getYearOfExperience());
			
			return experienceRepository.save(employeeExperienceInfo2);
		}
		return null;
	}
//get data of employee
	@Override
	public  Primary_Info getEmployeedata(PrimaryInfoDto employeeDto) {
		Primary_Info primary_Info=new Primary_Info();
		BeanUtils.copyProperties(employeeDto, primary_Info);
		Primary_Info getdata = primaryInfoRepository.findById(primary_Info.getEmpId()).orElse(null);
		if(getdata!=null) {
			return getdata;
		}
		return null;
	}
//create mentor	
	@Override
	public Mentor_Entity createMentorList(MentorListDto list) {
		if(list.getMentorId().startsWith("TYM")) {
			Mentor_Entity list2 = new Mentor_Entity();
			BeanUtils.copyProperties(list, list2);
			return (list2);
		}
		
		return null;
			
	}


//update mentor
	@Override
	public Mentor_Entity createMentorUpdate(MentorUpdateDto dto) {
		
		Mentor_Entity list = new Mentor_Entity();
		BeanUtils.copyProperties(dto, list);
	Mentor_Entity mentordetails=mentorEntityRepository.findById(list.getMentorId()).orElse(null);
		if(mentordetails != null) {
			list.setMentorEmailId(dto.getMentorEmailId());
			list.setMentorName(dto.getMentorName());
			list.setSkills(dto.getSkills());
			return mentorEntityRepository.save(list);
	
		}
		return null;
	}
//delete mentor
	@Override
	public boolean createMentorDelete(MentorDeleteDto deleteDto) {
		boolean isRegister=false;
		Mentor_Entity list = new Mentor_Entity();
		BeanUtils.copyProperties(deleteDto, list);
		Mentor_Entity list2 = mentorEntityRepository.findById(list.getMentorId()).orElse(null);
		if(list2 != null) {
			mentorEntityRepository.delete(list2);
			isRegister=true;
		}
		return isRegister;
	}
//search batch
@Override
	public BatchDetails searchBatchDetails(BatchDetailsDto batchDetailDto) {
		if (batchDetailDto.getEmp_batch_id().startsWith("TYB")) {
			if (batchDetailDto.getEmp_batch_id().equals(batchDetailDto.getEmp_batch_id())) {
				BeanUtils.copyProperties(batchDetailDto, batchDetails);
				BatchDetails searchbatch = batchDetailRepository.findById(batchDetailDto.getEmp_batch_id())
						.orElse(null);
				if (searchbatch != null)
					return searchbatch;
				else
					return null;
			}
			return null;

		}
		return null;
	}

//Batch CRUD API's
@Override
public BatchDetails createBatchDetails(BatchDetails batchDetails) {
	BatchDetails save = batchDetailRepository.save(batchDetails);
// save = batchDetailsRepository.save(batchDetails);
	if (save != null)
		return save;
	else
		return null;
}

@Override
public BatchDetails getBatchDetails(BatchDetailsDto batchDetailDto) {
	BeanUtils.copyProperties(batchDetailDto, batchDetails);
	BatchDetails getbatchdetail = batchDetailRepository.findById(batchDetailDto.getEmp_batch_id())
			.orElse(null);
	return getbatchdetail;
}

@Override
public BatchDetails updateBatchDetails(BatchDetailsDto batchDetailDto) {
	BeanUtils.copyProperties(batchDetailDto, batchDetails);
	BatchDetails updatebatch = batchDetailRepository.findById(batchDetailDto.getEmp_batch_id())
			.orElse(null);
	if (updatebatch != null) {
		batchDetails.setEmpBatchId(batchDetailDto.getEmp_batch_id());
		batchDetails.setEmpBatchName(batchDetailDto.getEmp_batch_name());
		batchDetails.setEmpMentorName(batchDetailDto.getEmp_mentor_name());
		batchDetails.setEmpTechnologies(batchDetailDto.getEmp_mentor_name());;
		batchDetails.setEmpStartDate(batchDetailDto.getEmp_start_date());;
		batchDetails.setEmpEndDate(batchDetailDto.getEmp_end_date());
		batchDetails.setEmpAction(batchDetailDto.getEmp_action());;
		batchDetails.setEmpStatus(batchDetailDto.getEmp_status());
		batchDetails.setEmpStrength(batchDetailDto.getEmp_batch_Strength());
		batchDetailRepository.save(batchDetails);
		return batchDetails;
	}
	return null;
}

@Override
public String deleteBatchDetails(BatchDetailsDto batchDetailDto) {
	BeanUtils.copyProperties(batchDetailDto, batchDetails);
	batchDetailRepository.deleteById(batchDetailDto.getEmp_batch_id());
	return null;
}

@Override
public List<RequestListForEmployee> employeeRequest() {
List<DemoDto> findAll = demoDtoRepository.findAll();
	
	List<RequestListForEmployee> forEmployee = new ArrayList<RequestListForEmployee>();
	
	for(DemoDto demoDto :findAll) {
		forEmployee.add(new RequestListForEmployee(demoDto.getEmployeeId(),demoDto.getEmployeeName(),
				demoDto.getExperience(),demoDto.getPercentage(),demoDto.getContactNumber()));
	}
	
	return forEmployee;
}

@Override
public ArrayList<StatusDto> approve() {
	List<BatchDetails> findAll = batchDetailRepository.findAll();
	ArrayList<StatusDto> arrayList = new ArrayList<>();
	for (BatchDetails employee : findAll) {
		arrayList.add(new StatusDto(employee.getEmpBatchId(), employee.getEmpBatchName()));
	}
	return arrayList;
}

@Override
public void approveStoring(AdminShowRequestDto adminShowRequestDto) {
	ApproveListByAdmin admin =new ApproveListByAdmin();
	BeanUtils.copyProperties(adminShowRequestDto, admin);
	approveRepositary.save(admin);
	
}

	


}
