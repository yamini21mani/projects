package com.te.ecommerce.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.te.ecommerce.dto.AddressDto;
import com.te.ecommerce.dto.CustomerDto;
import com.te.ecommerce.dto.ProductDto;
import com.te.ecommerce.entity.Customer;
import com.te.ecommerce.entity.Product;
import com.te.ecommerce.response.EcommerceResponse;
import com.te.ecommerce.serviceimplementation.CustomerServiceImp;

@RestController
public class CustomerController {
	@Autowired
	private EcommerceResponse ecommerceResponse;
	@Autowired
	private CustomerServiceImp serviceImp;
//	@Autowired
//	private ProductServiceImp productServiceImp;
	
//registeration
	@PostMapping("/register")
	public ResponseEntity<EcommerceResponse> register(@RequestBody Customer customer) {
		serviceImp.register(customer);
		ecommerceResponse.setMessage("registeration successful");
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
//Search products by name, id and category
	@GetMapping("/searchproductbyId")
	public ResponseEntity<EcommerceResponse> searchProductbyId(@RequestBody ProductDto productDto) {
		serviceImp.searchProductbyId(productDto);
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@GetMapping("/searchProductbyName")
	public ResponseEntity<EcommerceResponse> searchProductbyName(@RequestBody ProductDto productDto) {
		serviceImp.searchProductbyName(productDto);
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@GetMapping("/searchProductbyCategory")
	public ResponseEntity<EcommerceResponse> searchProductbyCategory(@RequestBody ProductDto productDto) {
		serviceImp.searchProductbyCategory(productDto);
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@GetMapping("/productlist")
	public ResponseEntity<EcommerceResponse> productList(@RequestBody ProductDto productDto) {
		List<Product> findAll = serviceImp.productList(productDto);
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		ecommerceResponse.setData(findAll);		
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@PutMapping("/updateCustomer")
	public ResponseEntity<EcommerceResponse> updateCustomer(@RequestBody CustomerDto customerDto) {
		Customer updateCustomer = serviceImp.updateCustomer(customerDto);
		ecommerceResponse.setMessage("Customer data modified successfully");
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		ecommerceResponse.setData(updateCustomer);		
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@GetMapping("/deleteCustomer")
	public ResponseEntity<EcommerceResponse> deleteCustomer(@RequestBody CustomerDto customerDto) {
		serviceImp.deleteCustomer(customerDto);
		ecommerceResponse.setMessage("Customer data deleted successfully");
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
	@GetMapping("/getCustomer")
	public ResponseEntity<EcommerceResponse> getCustomer(@RequestBody CustomerDto customerDto) {
		serviceImp.getCustomer(customerDto);
//		ecommerceResponse.setMessage("Customer data deleted successfully");
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
@PostMapping("/addAddress")
	public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
		boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
		ecommerceResponse.setMessage("Customer data modified successfully");
		ecommerceResponse.setError(false);
		ecommerceResponse.setStatus("200");
		ecommerceResponse.setData(updateCustomer);		
		return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

	}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
@PostMapping("/addAddress")
public ResponseEntity<EcommerceResponse> addAddress(@RequestBody AddressDto addressDto) {
	boolean updateCustomer = serviceImp.addShippingAddress(addressDto);
	ecommerceResponse.setMessage("Customer data modified successfully");
	ecommerceResponse.setError(false);
	ecommerceResponse.setStatus("200");
	ecommerceResponse.setData(updateCustomer);		
	return new ResponseEntity<EcommerceResponse>(ecommerceResponse, HttpStatus.ACCEPTED);

}
	
}
